package views

import (
	"github.com/deastl/htmx-doom/gameobjects"
	"fmt"
)


templ FloorTile(x int, y int, width int, height int){
      {{
      style := fmt.Sprintf(`
      transform-origin: 0 0 0; 
      position: absolute; 
      transform: translate3d(%dpx,0px,%dpx) rotate3d(1,0,0,90deg); 
      background-image: url('/public/stone-floor.jpg'); 
      width: %dpx; 
      height: %dpx; 
      background-size: 255px 255px; 
      transform-style: preserve-3d;">
      `, x, y, width, height)
      }}

      @templ.Raw(`<div style="`+style+`"></div>`)
}


templ Scene(game *gameobjects.GameMap) {

  
  {{ width := 16384 }}
  {{ height := 16384 }}
	<div id="scene" class="scene">
		for _,wall := range game.Walls {
			@Plane(wall)
		}


    for x := 0; x < 2; x++ {
      for y := 0; y < 2; y++ {
        @FloorTile(x * width ,y * height, width,height)
      }
    }

    <div style="position: absolute; transform: scale3d(100,100,100) translate3d(0,1px,0) rotate3d(1,0,0,90deg); background-image: radial-gradient(#00BFFF, white, blue); width: 2000px; height: 2000em; transform-style: preserve-3d;">
    </div>

    <style>
      .other-player {
        border-radius: 50%;
        width: 200px; 
        height: 200px; 
        background-color: #ffffffe0;
        position: absolute; 
        transform-style: preserve-3d; 
        box-shadow: -20px -16px 8px 0 rgb(255 192 192), 20px 15px 20px 0 rgb(255 230 137);
        filter: blur(20px);
        animation-duration: 4s;
        animation-name: pulse-player;
        animation-iteration-count: infinite;
      }

      @keyframes pulse-player {
        from { box-shadow: -20px -16px 8px 0 rgb(255 192 192), 20px 15px 20px 0 rgb(255 230 137);}
        to { box-shadow: -15px -10px 8px 0 rgb(280 150 192), 20px 15px 20px 0 rgb(220 180 137);}
      }
    </style>
    <div id="other_players">
    </div>

	</div>
}



templ SceneTransform(player *gameobjects.Player) {
  @templ.Raw("<style id='scene_transform'> #scene{" +
  fmt.Sprintf(`
  transform: perspective(4096px)
  rotate3d(0,1,0,%fdeg)
  rotate3d(1,0,0,%fdeg)
  rotate3d(0,0,1,%fdeg)
  translate3d(%fpx,%fpx,%fpx) scale3d(200,200,200); `,
  player.Rotation.Y,
  player.Rotation.X,
  player.Rotation.Z,
  player.Position.X * -200,
  player.Position.Y * 200,
  player.Position.Z * -200,
  )+
  "}</style>")
}
